// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  email        String        @unique
  passwordHash String
  sessions     Session[]
  discussions  Discussion[]
  posts        Post[]
  participants Participant[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Topic {
  id    String @id @default(cuid())
  title String @unique

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  discussions Discussion[]
}

model Discussion {
  id             String    @id @default(cuid())
  title          String
  userId         String?
  topicId        String
  pinned         Boolean   @default(false)
  pinnedAt       DateTime?
  lastActivityAt DateTime  @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  topic          Topic         @relation(fields: [topicId], references: [id])
  posts          Post[]
  participants   Participant[]
  solutionPostId String?       @unique
  solutionPost   Post?         @relation("SolutionPost", fields: [solutionPostId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([topicId])
}

model Post {
  id           String     @id @default(cuid())
  userId       String?
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parentId     String?
  parent       Post?      @relation("PostThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Post[]     @relation("PostThread")
  body         String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  solutionFor Discussion? @relation("SolutionPost")
}

model Participant {
  userId       String
  discussionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@id(name: "participantId", [userId, discussionId])
  @@index([discussionId])
  @@index([userId])
}
